{"version":3,"sources":["webpack:///./node_modules/secp256k1/lib/elliptic/index.js","webpack:///./node_modules/secp256k1/lib/der.js","webpack:///./node_modules/secp256k1/elliptic.js","webpack:///./node_modules/secp256k1/lib/index.js","webpack:///./node_modules/secp256k1/lib/assert.js","webpack:///./node_modules/bip66/index.js"],"names":["Buffer","createHash","BN","EC","ec","messages","ecparams","curve","loadCompressedPublicKey","first","xBuffer","x","cmp","p","toRed","red","y","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadUncompressedPublicKey","yBuffer","x3","redISub","isZero","loadPublicKey","publicKey","length","slice","exports","privateKeyVerify","privateKey","bn","n","privateKeyExport","compressed","d","Error","EC_PRIVATE_KEY_EXPORT_DER_FAIL","from","keyFromPrivate","getPublic","privateKeyNegate","alloc","sub","umod","toArrayLike","privateKeyModInverse","EC_PRIVATE_KEY_RANGE_INVALID","invm","privateKeyTweakAdd","tweak","EC_PRIVATE_KEY_TWEAK_ADD_FAIL","iadd","isub","privateKeyTweakMul","EC_PRIVATE_KEY_TWEAK_MUL_FAIL","imul","publicKeyCreate","EC_PUBLIC_KEY_CREATE_FAIL","publicKeyConvert","pair","EC_PUBLIC_KEY_PARSE_FAIL","publicKeyVerify","publicKeyTweakAdd","EC_PUBLIC_KEY_TWEAK_ADD_FAIL","point","g","mul","add","isInfinity","encode","publicKeyTweakMul","EC_PUBLIC_KEY_TWEAK_MUL_FAIL","publicKeyCombine","publicKeys","pairs","Array","i","j","EC_PUBLIC_KEY_COMBINE_FAIL","signatureNormalize","signature","r","s","ECDSA_SIGNATURE_PARSE_FAIL","result","nh","copy","signatureExport","signatureImport","sigObj","concat","sign","message","noncefn","data","getNonce","counter","nonce","isBuffer","ECDSA_SIGN_FAIL","canonical","k","pers","recovery","recoveryParam","verify","sigr","sigs","recover","recoverPubKey","err","ECDSA_RECOVER_FAIL","ecdh","shared","ecdhUnsafe","update","digest","scalar","ECDH_FAIL","bip66","EC_PRIVKEY_EXPORT_DER_COMPRESSED","EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED","privateKeyImport","index","lenb","len","lenR","posR","lenS","posS","sig","decode","signatureImportLax","lenbyte","rlen","rindex","slen","sindex","rvalue","svalue","module","assert","der","initCompressedValue","value","defaultValue","undefined","isBoolean","COMPRESSED_TYPE_INVALID","secp256k1","EC_PRIVATE_KEY_TYPE_INVALID","isBufferLength","EC_PRIVATE_KEY_LENGTH_INVALID","EC_PRIVATE_KEY_IMPORT_DER_FAIL","TWEAK_TYPE_INVALID","TWEAK_LENGTH_INVALID","EC_PUBLIC_KEY_TYPE_INVALID","isBufferLength2","EC_PUBLIC_KEY_LENGTH_INVALID","isArray","EC_PUBLIC_KEYS_TYPE_INVALID","isLengthGTZero","EC_PUBLIC_KEYS_LENGTH_INVALID","ECDSA_SIGNATURE_TYPE_INVALID","ECDSA_SIGNATURE_LENGTH_INVALID","ECDSA_SIGNATURE_PARSE_DER_FAIL","options","MSG32_TYPE_INVALID","MSG32_LENGTH_INVALID","isObject","OPTIONS_TYPE_INVALID","OPTIONS_DATA_TYPE_INVALID","OPTIONS_DATA_LENGTH_INVALID","isFunction","OPTIONS_NONCEFN_TYPE_INVALID","isNumber","RECOVERY_ID_TYPE_INVALID","isNumberInInterval","RECOVERY_ID_VALUE_INVALID","toString","Object","prototype","TypeError","call","buffer","RangeError","length1","length2","number","check","allocUnsafe"],"mappings":"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","file":"js/chunk-26440418.24b9708d.js","sourcesContent":["'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\n\nvar messages = require('../messages.json')\n\nvar ec = new EC('secp256k1')\nvar ecparams = ec.curve\n\nfunction loadCompressedPublicKey (first, xBuffer) {\n  var x = new BN(xBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xBuffer, yBuffer) {\n  var x = new BN(xBuffer)\n  var y = new BN(yBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  var x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (publicKey) {\n  var first = publicKey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (publicKey.length !== 33) return null\n      return loadCompressedPublicKey(first, publicKey.slice(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (publicKey.length !== 65) return null\n      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))\n    default:\n      return null\n  }\n}\n\nexports.privateKeyVerify = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero()\n}\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.privateKeyNegate = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)\n\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  bn.iadd(new BN(privateKey))\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\n\n  bn.imul(new BN(privateKey))\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return Buffer.from(pair.getPublic(compressed, true))\n}\n\nexports.publicKeyVerify = function (publicKey) {\n  return loadPublicKey(publicKey) !== null\n}\n\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  var point = ecparams.g.mul(tweak).add(pair.pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\n\n  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))\n}\n\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var pairs = new Array(publicKeys.length)\n  for (var i = 0; i < publicKeys.length; ++i) {\n    pairs[i] = loadPublicKey(publicKeys[i])\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n  }\n\n  var point = pairs[0].pub\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.signatureNormalize = function (signature) {\n  var r = new BN(signature.slice(0, 32))\n  var s = new BN(signature.slice(32, 64))\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  var result = Buffer.from(signature)\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)\n\n  return result\n}\n\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32)\n  var s = signature.slice(32, 64)\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r)\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n  var s = new BN(sigObj.s)\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n  return Buffer.concat([\n    r.toArrayLike(Buffer, 'be', 32),\n    s.toArrayLike(Buffer, 'be', 32)\n  ])\n}\n\nexports.sign = function (message, privateKey, noncefn, data) {\n  if (typeof noncefn === 'function') {\n    var getNonce = noncefn\n    noncefn = function (counter) {\n      var nonce = getNonce(message, privateKey, null, data, counter)\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n      return new BN(nonce)\n    }\n  }\n\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })\n  return {\n    signature: Buffer.concat([\n      result.r.toArrayLike(Buffer, 'be', 32),\n      result.s.toArrayLike(Buffer, 'be', 32)\n    ]),\n    recovery: result.recoveryParam\n  }\n}\n\nexports.verify = function (message, signature, publicKey) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false\n\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })\n}\n\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  try {\n    if (sigr.isZero() || sigs.isZero()) throw new Error()\n\n    var point = ec.recoverPubKey(message, sigObj, recovery)\n    return Buffer.from(point.encode(true, compressed))\n  } catch (err) {\n    throw new Error(messages.ECDSA_RECOVER_FAIL)\n  }\n}\n\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\n  return createHash('sha256').update(shared).digest()\n}\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var scalar = new BN(privateKey)\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\n\n  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar bip66 = require('bip66')\n\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([\n  // begin\n  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([\n  // begin\n  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,\n  0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,\n  0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nexports.privateKeyExport = function (privateKey, publicKey, compressed) {\n  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)\n  privateKey.copy(result, compressed ? 8 : 9)\n  publicKey.copy(result, compressed ? 181 : 214)\n  return result\n}\n\nexports.privateKeyImport = function (privateKey) {\n  var length = privateKey.length\n\n  // sequence header\n  var index = 0\n  if (length < index + 1 || privateKey[index] !== 0x30) return\n  index += 1\n\n  // sequence length constructor\n  if (length < index + 1 || !(privateKey[index] & 0x80)) return\n\n  var lenb = privateKey[index] & 0x7f\n  index += 1\n  if (lenb < 1 || lenb > 2) return\n  if (length < index + lenb) return\n\n  // sequence length\n  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)\n  index += lenb\n  if (length < index + len) return\n\n  // sequence element 0: version number (=1)\n  if (length < index + 3 ||\n      privateKey[index] !== 0x02 ||\n      privateKey[index + 1] !== 0x01 ||\n      privateKey[index + 2] !== 0x01) {\n    return\n  }\n  index += 3\n\n  // sequence element 1: octet string, up to 32 bytes\n  if (length < index + 2 ||\n      privateKey[index] !== 0x04 ||\n      privateKey[index + 1] > 0x20 ||\n      length < index + 2 + privateKey[index + 1]) {\n    return\n  }\n\n  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])\n}\n\nexports.signatureExport = function (sigObj) {\n  var r = Buffer.concat([Buffer.from([0]), sigObj.r])\n  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n  var s = Buffer.concat([Buffer.from([0]), sigObj.s])\n  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n  return bip66.encode(r.slice(posR), s.slice(posS))\n}\n\nexports.signatureImport = function (sig) {\n  var r = Buffer.alloc(32, 0)\n  var s = Buffer.alloc(32, 0)\n\n  try {\n    var sigObj = bip66.decode(sig)\n    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)\n    if (sigObj.r.length > 32) throw new Error('R length is too long')\n    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)\n    if (sigObj.s.length > 32) throw new Error('S length is too long')\n  } catch (err) {\n    return\n  }\n\n  sigObj.r.copy(r, 32 - sigObj.r.length)\n  sigObj.s.copy(s, 32 - sigObj.s.length)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImportLax = function (sig) {\n  var r = Buffer.alloc(32, 0)\n  var s = Buffer.alloc(32, 0)\n\n  var length = sig.length\n  var index = 0\n\n  // sequence tag byte\n  if (sig[index++] !== 0x30) return\n\n  // sequence length byte\n  var lenbyte = sig[index++]\n  if (lenbyte & 0x80) {\n    index += lenbyte - 0x80\n    if (index > length) return\n  }\n\n  // sequence tag byte for r\n  if (sig[index++] !== 0x02) return\n\n  // length for r\n  var rlen = sig[index++]\n  if (rlen & 0x80) {\n    lenbyte = rlen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]\n  }\n  if (rlen > length - index) return\n  var rindex = index\n  index += rlen\n\n  // sequence tag byte for s\n  if (sig[index++] !== 0x02) return\n\n  // length for s\n  var slen = sig[index++]\n  if (slen & 0x80) {\n    lenbyte = slen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]\n  }\n  if (slen > length - index) return\n  var sindex = index\n  index += slen\n\n  // ignore leading zeros in r\n  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);\n  // copy r value\n  if (rlen > 32) return\n  var rvalue = sig.slice(rindex, rindex + rlen)\n  rvalue.copy(r, 32 - rvalue.length)\n\n  // ignore leading zeros in s\n  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);\n  // copy s value\n  if (slen > 32) return\n  var svalue = sig.slice(sindex, sindex + slen)\n  svalue.copy(s, 32 - svalue.length)\n\n  return { r: r, s: s }\n}\n","'use strict'\nmodule.exports = require('./lib')(require('./lib/elliptic'))\n","'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyNegate(privateKey)\n    },\n\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyModInverse(privateKey)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n","'use strict'\nvar toString = Object.prototype.toString\n\n// TypeError\nexports.isArray = function (value, message) {\n  if (!Array.isArray(value)) throw TypeError(message)\n}\n\nexports.isBoolean = function (value, message) {\n  if (toString.call(value) !== '[object Boolean]') throw TypeError(message)\n}\n\nexports.isBuffer = function (value, message) {\n  if (!Buffer.isBuffer(value)) throw TypeError(message)\n}\n\nexports.isFunction = function (value, message) {\n  if (toString.call(value) !== '[object Function]') throw TypeError(message)\n}\n\nexports.isNumber = function (value, message) {\n  if (toString.call(value) !== '[object Number]') throw TypeError(message)\n}\n\nexports.isObject = function (value, message) {\n  if (toString.call(value) !== '[object Object]') throw TypeError(message)\n}\n\n// RangeError\nexports.isBufferLength = function (buffer, length, message) {\n  if (buffer.length !== length) throw RangeError(message)\n}\n\nexports.isBufferLength2 = function (buffer, length1, length2, message) {\n  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)\n}\n\nexports.isLengthGTZero = function (value, message) {\n  if (value.length === 0) throw RangeError(message)\n}\n\nexports.isNumberInInterval = function (number, x, y, message) {\n  if (number <= x || number >= y) throw RangeError(message)\n}\n","// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki\n// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n// NOTE: SIGHASH byte ignored AND restricted, truncate before use\n\nvar Buffer = require('safe-buffer').Buffer\n\nfunction check (buffer) {\n  if (buffer.length < 8) return false\n  if (buffer.length > 72) return false\n  if (buffer[0] !== 0x30) return false\n  if (buffer[1] !== buffer.length - 2) return false\n  if (buffer[2] !== 0x02) return false\n\n  var lenR = buffer[3]\n  if (lenR === 0) return false\n  if (5 + lenR >= buffer.length) return false\n  if (buffer[4 + lenR] !== 0x02) return false\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) return false\n  if ((6 + lenR + lenS) !== buffer.length) return false\n\n  if (buffer[4] & 0x80) return false\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false\n\n  if (buffer[lenR + 6] & 0x80) return false\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false\n  return true\n}\n\nfunction decode (buffer) {\n  if (buffer.length < 8) throw new Error('DER sequence length is too short')\n  if (buffer.length > 72) throw new Error('DER sequence length is too long')\n  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')\n  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')\n  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')\n\n  var lenR = buffer[3]\n  if (lenR === 0) throw new Error('R length is zero')\n  if (5 + lenR >= buffer.length) throw new Error('R length is too long')\n  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) throw new Error('S length is zero')\n  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')\n\n  if (buffer[4] & 0x80) throw new Error('R value is negative')\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')\n\n  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')\n\n  // non-BIP66 - extract R, S values\n  return {\n    r: buffer.slice(4, 4 + lenR),\n    s: buffer.slice(6 + lenR)\n  }\n}\n\n/*\n * Expects r and s to be positive DER integers.\n *\n * The DER format uses the most significant bit as a sign bit (& 0x80).\n * If the significant bit is set AND the integer is positive, a 0x00 is prepended.\n *\n * Examples:\n *\n *      0 =>     0x00\n *      1 =>     0x01\n *     -1 =>     0xff\n *    127 =>     0x7f\n *   -127 =>     0x81\n *    128 =>   0x0080\n *   -128 =>     0x80\n *    255 =>   0x00ff\n *   -255 =>   0xff01\n *  16300 =>   0x3fac\n * -16300 =>   0xc054\n *  62300 => 0x00f35c\n * -62300 => 0xff0ca4\n*/\nfunction encode (r, s) {\n  var lenR = r.length\n  var lenS = s.length\n  if (lenR === 0) throw new Error('R length is zero')\n  if (lenS === 0) throw new Error('S length is zero')\n  if (lenR > 33) throw new Error('R length is too long')\n  if (lenS > 33) throw new Error('S length is too long')\n  if (r[0] & 0x80) throw new Error('R value is negative')\n  if (s[0] & 0x80) throw new Error('S value is negative')\n  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')\n  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')\n\n  var signature = Buffer.allocUnsafe(6 + lenR + lenS)\n\n  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n  signature[0] = 0x30\n  signature[1] = signature.length - 2\n  signature[2] = 0x02\n  signature[3] = r.length\n  r.copy(signature, 4)\n  signature[4 + lenR] = 0x02\n  signature[5 + lenR] = s.length\n  s.copy(signature, 6 + lenR)\n\n  return signature\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  encode: encode\n}\n"],"sourceRoot":""}