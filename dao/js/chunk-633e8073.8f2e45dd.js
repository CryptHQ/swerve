(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-633e8073"],{"1d17":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Eth; });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a67d");\n/* harmony import */ var _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("a8fc");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("901e");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var rlp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("a3ca");\n/* harmony import */ var rlp__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(rlp__WEBPACK_IMPORTED_MODULE_3__);\n/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the "License");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\n\n\n\n\n\nfunction hexBuffer(str) {\n  return Buffer.from(str.startsWith("0x") ? str.slice(2) : str, "hex");\n}\n\nfunction maybeHexBuffer(str) {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__[/* EthAppPleaseEnableContractData */ "a"]("Please enable Contract data on the Ethereum app Settings");\n  }\n\n  return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from "@ledgerhq/hw-app-eth";\n * const eth = new Eth(transport)\n */\n\n\nclass Eth {\n  constructor(transport, scrambleKey = "w0w") {\n    this.transport = void 0;\n    this.transport = transport;\n    transport.decorateAppAPIMethods(this, ["getAddress", "provideERC20TokenInformation", "signTransaction", "signPersonalMessage", "getAppConfiguration", "starkGetPublicKey", "starkSignOrder", "starkSignTransfer", "starkProvideQuantum"], scrambleKey);\n  }\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress("44\'/60\'/0\'/0/0").then(o => o.address)\n   */\n\n\n  getAddress(path, boolDisplay, boolChaincode) {\n    let paths = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* splitPath */ "b"])(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(response => {\n      let result = {};\n      let publicKeyLength = response[0];\n      let addressLength = response[1 + publicKeyLength];\n      result.publicKey = response.slice(1, 1 + publicKeyLength).toString("hex");\n      result.address = "0x" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString("ascii");\n\n      if (boolChaincode) {\n        result.chainCode = response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString("hex");\n      }\n\n      return result;\n    });\n  }\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from "erc20.js" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from "@ledgerhq/hw-app-eth/erc20"\n   * const zrxInfo = byContractAddress("0xe41d2489571d322189246dafa5ebde1f4699f498")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n\n\n  provideERC20TokenInformation({\n    data\n  }) {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it\'s fine to assume it worked.\n        // we return a flag to know if the call was effective or not\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction("44\'/60\'/0\'/0/0", "e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080").then(result => ...)\n   */\n\n\n  signTransaction(path, rawTxHex) {\n    let paths = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* splitPath */ "b"])(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, "hex");\n    let toSend = [];\n    let response; // Check if the TX is encoded following EIP 155\n\n    let rlpTx = Object(rlp__WEBPACK_IMPORTED_MODULE_3__["decode"])(rawTx);\n    let rlpOffset = 0;\n\n    if (rlpTx.length > 6) {\n      let rlpVrs = Object(rlp__WEBPACK_IMPORTED_MODULE_3__["encode"])(rlpTx.slice(-3));\n      rlpOffset = rawTx.length - (rlpVrs.length - 1);\n    }\n\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n\n      if (rlpOffset != 0 && offset + chunkSize == rlpOffset) {\n        // Make sure that the chunk doesn\'t end right on the EIP 155 marker if set\n        chunkSize--;\n      }\n\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* foreach */ "a"])(toSend, (data, i) => this.transport.send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response.slice(0, 1).toString("hex");\n      const r = response.slice(1, 1 + 32).toString("hex");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");\n      return {\n        v,\n        r,\n        s\n      };\n    }, e => {\n      throw remapTransactionRelatedErrors(e);\n    });\n  }\n  /**\n   */\n\n\n  getAppConfiguration() {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.erc20ProvisioningNecessary = response[0] & 0x02;\n      result.starkEnabled = response[0] & 0x04;\n      result.version = "" + response[1] + "." + response[2] + "." + response[3];\n      return result;\n    });\n  }\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage("44\'/60\'/0\'/0/0", Buffer.from("test").toString("hex")).then(result => {\n  var v = result[\'v\'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = "0" + v;\n  }\n  console.log("Signature 0x" + result[\'r\'] + result[\'s\'] + v);\n  })\n   */\n\n\n  signPersonalMessage(path, messageHex) {\n    let paths = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* splitPath */ "b"])(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, "hex");\n    let toSend = [];\n    let response;\n\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* foreach */ "a"])(toSend, (data, i) => this.transport.send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString("hex");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n\n\n  starkGetPublicKey(path, boolDisplay) {\n    let paths = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* splitPath */ "b"])(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(response => {\n      return response.slice(0, response.length - 2);\n    });\n  }\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignOrder(path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    let paths = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* splitPath */ "b"])(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);\n    offset += 32;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(destinationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, "0"), "hex").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, "0"), "hex").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x01, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString("hex");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignTransfer(path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    let paths = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* splitPath */ "b"])(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(transferQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, "0"), "hex").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x02, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString("hex");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString("hex");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n\n\n  starkProvideQuantum(operationContract, operationQuantization) {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    let buffer = Buffer.alloc(20 + 32, 0);\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n\n    Buffer.from(operationQuantization.toString(16).padStart(64, "0"), "hex").copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  }\n\n}\n//# sourceMappingURL=Eth.js.map\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("1c35").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1d17\n')},a67d:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export defer */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return splitPath; });\n/* unused harmony export eachSeries */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return foreach; });\n/* unused harmony export doIf */\n/* unused harmony export asyncWhile */\n/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the "License");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\nfunction defer() {\n  let resolve, reject;\n  let promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw "defer() error"; // this never happens and is just to make flow happy\n\n  return {\n    promise,\n    resolve,\n    reject\n  };\n} // TODO use bip32-path library\n\nfunction splitPath(path) {\n  let result = [];\n  let components = path.split("/");\n  components.forEach(element => {\n    let number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn\'t it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === "\'") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n} // TODO use async await\n\nfunction eachSeries(arr, fun) {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\nfunction foreach(arr, callback) {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else return callback(array[index], index).then(function (res) {\n      result.push(res);\n      return iterate(index + 1, array, result);\n    });\n  }\n\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\nfunction doIf(condition, callback) {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\nfunction asyncWhile(predicate, callback) {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(res => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n\n  return Promise.resolve([]).then(iterate);\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGxlZGdlcmhxL2h3LWFwcC1ldGgvbGliLWVzL3V0aWxzLmpzP2E2N2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGlEQUFpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRU07QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVNO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYTY3ZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICBMZWRnZXIgTm9kZSBKUyBBUElcbiAqICAgKGMpIDIwMTYtMjAxNyBMZWRnZXJcbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgZnVuY3Rpb24gZGVmZXIoKSB7XG4gIGxldCByZXNvbHZlLCByZWplY3Q7XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHN1Y2Nlc3MsIGZhaWx1cmUpIHtcbiAgICByZXNvbHZlID0gc3VjY2VzcztcbiAgICByZWplY3QgPSBmYWlsdXJlO1xuICB9KTtcbiAgaWYgKCFyZXNvbHZlIHx8ICFyZWplY3QpIHRocm93IFwiZGVmZXIoKSBlcnJvclwiOyAvLyB0aGlzIG5ldmVyIGhhcHBlbnMgYW5kIGlzIGp1c3QgdG8gbWFrZSBmbG93IGhhcHB5XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9taXNlLFxuICAgIHJlc29sdmUsXG4gICAgcmVqZWN0XG4gIH07XG59IC8vIFRPRE8gdXNlIGJpcDMyLXBhdGggbGlicmFyeVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRQYXRoKHBhdGgpIHtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICBsZXQgY29tcG9uZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBjb21wb25lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgbGV0IG51bWJlciA9IHBhcnNlSW50KGVsZW1lbnQsIDEwKTtcblxuICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICByZXR1cm47IC8vIEZJWE1FIHNob3VsZG4ndCBpdCB0aHJvd3MgaW5zdGVhZD9cbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5sZW5ndGggPiAxICYmIGVsZW1lbnRbZWxlbWVudC5sZW5ndGggLSAxXSA9PT0gXCInXCIpIHtcbiAgICAgIG51bWJlciArPSAweDgwMDAwMDAwO1xuICAgIH1cblxuICAgIHJlc3VsdC5wdXNoKG51bWJlcik7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSAvLyBUT0RPIHVzZSBhc3luYyBhd2FpdFxuXG5leHBvcnQgZnVuY3Rpb24gZWFjaFNlcmllcyhhcnIsIGZ1bikge1xuICByZXR1cm4gYXJyLnJlZHVjZSgocCwgZSkgPT4gcC50aGVuKCgpID0+IGZ1bihlKSksIFByb21pc2UucmVzb2x2ZSgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JlYWNoKGFyciwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gaXRlcmF0ZShpbmRleCwgYXJyYXksIHJlc3VsdCkge1xuICAgIGlmIChpbmRleCA+PSBhcnJheS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHJldHVybiBjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHJlcyk7XG4gICAgICByZXR1cm4gaXRlcmF0ZShpbmRleCArIDEsIGFycmF5LCByZXN1bHQpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gaXRlcmF0ZSgwLCBhcnIsIFtdKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZG9JZihjb25kaXRpb24sIGNhbGxiYWNrKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzeW5jV2hpbGUocHJlZGljYXRlLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBpdGVyYXRlKHJlc3VsdCkge1xuICAgIGlmICghcHJlZGljYXRlKCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmVzdWx0LnB1c2gocmVzKTtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGUocmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pLnRoZW4oaXRlcmF0ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///a67d\n')},a8fc:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export AccountNameRequiredError */\n/* unused harmony export AccountNotSupported */\n/* unused harmony export AmountRequired */\n/* unused harmony export BluetoothRequired */\n/* unused harmony export BtcUnmatchedApp */\n/* unused harmony export CantOpenDevice */\n/* unused harmony export CantScanQRCode */\n/* unused harmony export CashAddrNotSupported */\n/* unused harmony export CurrencyNotSupported */\n/* unused harmony export DBNotReset */\n/* unused harmony export DBWrongPassword */\n/* unused harmony export DeviceAppVerifyNotSupported */\n/* unused harmony export DeviceGenuineSocketEarlyClose */\n/* unused harmony export DeviceHalted */\n/* unused harmony export DeviceInOSUExpected */\n/* unused harmony export DeviceNameInvalid */\n/* unused harmony export DeviceNotGenuineError */\n/* unused harmony export DeviceOnDashboardExpected */\n/* unused harmony export DeviceOnDashboardUnexpected */\n/* unused harmony export DeviceShouldStayInApp */\n/* unused harmony export DeviceSocketFail */\n/* unused harmony export DeviceSocketNoBulkStatus */\n/* unused harmony export DisconnectedDevice */\n/* unused harmony export DisconnectedDeviceDuringOperation */\n/* unused harmony export ETHAddressNonEIP */\n/* unused harmony export EnpointConfigError */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EthAppPleaseEnableContractData; });\n/* unused harmony export FeeEstimationFailed */\n/* unused harmony export FeeNotLoaded */\n/* unused harmony export FeeRequired */\n/* unused harmony export FeeTooHigh */\n/* unused harmony export FirmwareNotRecognized */\n/* unused harmony export FirmwareOrAppUpdateRequired */\n/* unused harmony export GasLessThanEstimate */\n/* unused harmony export GenuineCheckFailed */\n/* unused harmony export HardResetFail */\n/* unused harmony export InvalidAddress */\n/* unused harmony export InvalidAddressBecauseDestinationIsAlsoSource */\n/* unused harmony export InvalidXRPTag */\n/* unused harmony export LatestMCUInstalledError */\n/* unused harmony export LedgerAPI4xx */\n/* unused harmony export LedgerAPI5xx */\n/* unused harmony export LedgerAPIError */\n/* unused harmony export LedgerAPIErrorWithMessage */\n/* unused harmony export LedgerAPINotAvailable */\n/* unused harmony export MCUNotGenuineToDashboard */\n/* unused harmony export ManagerAppAlreadyInstalledError */\n/* unused harmony export ManagerAppDepInstallRequired */\n/* unused harmony export ManagerAppDepUninstallRequired */\n/* unused harmony export ManagerAppRelyOnBTCError */\n/* unused harmony export ManagerDeviceLockedError */\n/* unused harmony export ManagerFirmwareNotEnoughSpaceError */\n/* unused harmony export ManagerNotEnoughSpaceError */\n/* unused harmony export ManagerUninstallBTCDep */\n/* unused harmony export NetworkDown */\n/* unused harmony export NoAccessToCamera */\n/* unused harmony export NoAddressesFound */\n/* unused harmony export NoDBPathGiven */\n/* unused harmony export NotEnoughBalance */\n/* unused harmony export NotEnoughBalanceBecauseDestinationNotCreated */\n/* unused harmony export NotEnoughBalanceInParentAccount */\n/* unused harmony export NotEnoughBalanceToDelegate */\n/* unused harmony export NotEnoughGas */\n/* unused harmony export NotEnoughSpendableBalance */\n/* unused harmony export NotSupportedLegacyAddress */\n/* unused harmony export PairingFailed */\n/* unused harmony export PasswordIncorrectError */\n/* unused harmony export PasswordsDontMatchError */\n/* unused harmony export RecipientRequired */\n/* unused harmony export RecommendSubAccountsToEmpty */\n/* unused harmony export RecommendUndelegation */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return StatusCodes; });\n/* unused harmony export SyncError */\n/* unused harmony export TimeoutTagged */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return TransportError; });\n/* unused harmony export TransportInterfaceNotAvailable */\n/* unused harmony export TransportOpenUserCancelled */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return TransportRaceCondition; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return TransportStatusError; });\n/* unused harmony export TransportWebUSBGestureRequired */\n/* unused harmony export UnavailableTezosOriginatedAccountReceive */\n/* unused harmony export UnavailableTezosOriginatedAccountSend */\n/* unused harmony export UnexpectedBootloader */\n/* unused harmony export UnknownMCU */\n/* unused harmony export UpdateFetchFileFail */\n/* unused harmony export UpdateIncorrectHash */\n/* unused harmony export UpdateIncorrectSig */\n/* unused harmony export UpdateYourApp */\n/* unused harmony export UserRefusedAddress */\n/* unused harmony export UserRefusedAllowManager */\n/* unused harmony export UserRefusedDeviceNameChange */\n/* unused harmony export UserRefusedFirmwareUpdate */\n/* unused harmony export UserRefusedOnDevice */\n/* unused harmony export WebsocketConnectionError */\n/* unused harmony export WebsocketConnectionFailed */\n/* unused harmony export WrongAppForCurrency */\n/* unused harmony export WrongDeviceForAccount */\n/* unused harmony export addCustomErrorDeserializer */\n/* unused harmony export createCustomErrorClass */\n/* unused harmony export deserializeError */\n/* unused harmony export getAltStatusMessage */\n/* unused harmony export serializeError */\n/* eslint-disable no-continue */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nvar errorClasses = {};\r\nvar deserializers = {};\r\nvar addCustomErrorDeserializer = function (name, deserializer) {\r\n    deserializers[name] = deserializer;\r\n};\r\nvar createCustomErrorClass = function (name) {\r\n    var C = function CustomError(message, fields) {\r\n        Object.assign(this, fields);\r\n        this.name = name;\r\n        this.message = message || name;\r\n        this.stack = new Error().stack;\r\n    };\r\n    C.prototype = new Error();\r\n    errorClasses[name] = C;\r\n    return C;\r\n};\r\n// inspired from https://github.com/programble/errio/blob/master/index.js\r\nvar deserializeError = function (object) {\r\n    if (typeof object === "object" && object) {\r\n        try {\r\n            // $FlowFixMe FIXME HACK\r\n            var msg = JSON.parse(object.message);\r\n            if (msg.message && msg.name) {\r\n                object = msg;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // nothing\r\n        }\r\n        var error = void 0;\r\n        if (typeof object.name === "string") {\r\n            var name_1 = object.name;\r\n            var des = deserializers[name_1];\r\n            if (des) {\r\n                error = des(object);\r\n            }\r\n            else {\r\n                var constructor = name_1 === "Error" ? Error : errorClasses[name_1];\r\n                if (!constructor) {\r\n                    console.warn("deserializing an unknown class \'" + name_1 + "\'");\r\n                    constructor = createCustomErrorClass(name_1);\r\n                }\r\n                error = Object.create(constructor.prototype);\r\n                try {\r\n                    for (var prop in object) {\r\n                        if (object.hasOwnProperty(prop)) {\r\n                            error[prop] = object[prop];\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // sometimes setting a property can fail (e.g. .name)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            error = new Error(object.message);\r\n        }\r\n        if (!error.stack && Error.captureStackTrace) {\r\n            Error.captureStackTrace(error, deserializeError);\r\n        }\r\n        return error;\r\n    }\r\n    return new Error(String(object));\r\n};\r\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\r\nvar serializeError = function (value) {\r\n    if (!value)\r\n        return value;\r\n    if (typeof value === "object") {\r\n        return destroyCircular(value, []);\r\n    }\r\n    if (typeof value === "function") {\r\n        return "[Function: " + (value.name || "anonymous") + "]";\r\n    }\r\n    return value;\r\n};\r\n// https://www.npmjs.com/package/destroy-circular\r\nfunction destroyCircular(from, seen) {\r\n    var to = {};\r\n    seen.push(from);\r\n    for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        var value = from[key];\r\n        if (typeof value === "function") {\r\n            continue;\r\n        }\r\n        if (!value || typeof value !== "object") {\r\n            to[key] = value;\r\n            continue;\r\n        }\r\n        if (seen.indexOf(from[key]) === -1) {\r\n            to[key] = destroyCircular(from[key], seen.slice(0));\r\n            continue;\r\n        }\r\n        to[key] = "[Circular]";\r\n    }\r\n    if (typeof from.name === "string") {\r\n        to.name = from.name;\r\n    }\r\n    if (typeof from.message === "string") {\r\n        to.message = from.message;\r\n    }\r\n    if (typeof from.stack === "string") {\r\n        to.stack = from.stack;\r\n    }\r\n    return to;\r\n}\n\nvar AccountNameRequiredError = createCustomErrorClass("AccountNameRequired");\r\nvar AccountNotSupported = createCustomErrorClass("AccountNotSupported");\r\nvar AmountRequired = createCustomErrorClass("AmountRequired");\r\nvar BluetoothRequired = createCustomErrorClass("BluetoothRequired");\r\nvar BtcUnmatchedApp = createCustomErrorClass("BtcUnmatchedApp");\r\nvar CantOpenDevice = createCustomErrorClass("CantOpenDevice");\r\nvar CashAddrNotSupported = createCustomErrorClass("CashAddrNotSupported");\r\nvar CurrencyNotSupported = createCustomErrorClass("CurrencyNotSupported");\r\nvar DeviceAppVerifyNotSupported = createCustomErrorClass("DeviceAppVerifyNotSupported");\r\nvar DeviceGenuineSocketEarlyClose = createCustomErrorClass("DeviceGenuineSocketEarlyClose");\r\nvar DeviceNotGenuineError = createCustomErrorClass("DeviceNotGenuine");\r\nvar DeviceOnDashboardExpected = createCustomErrorClass("DeviceOnDashboardExpected");\r\nvar DeviceOnDashboardUnexpected = createCustomErrorClass("DeviceOnDashboardUnexpected");\r\nvar DeviceInOSUExpected = createCustomErrorClass("DeviceInOSUExpected");\r\nvar DeviceHalted = createCustomErrorClass("DeviceHalted");\r\nvar DeviceNameInvalid = createCustomErrorClass("DeviceNameInvalid");\r\nvar DeviceSocketFail = createCustomErrorClass("DeviceSocketFail");\r\nvar DeviceSocketNoBulkStatus = createCustomErrorClass("DeviceSocketNoBulkStatus");\r\nvar DisconnectedDevice = createCustomErrorClass("DisconnectedDevice");\r\nvar DisconnectedDeviceDuringOperation = createCustomErrorClass("DisconnectedDeviceDuringOperation");\r\nvar EnpointConfigError = createCustomErrorClass("EnpointConfig");\r\nvar EthAppPleaseEnableContractData = createCustomErrorClass("EthAppPleaseEnableContractData");\r\nvar FeeEstimationFailed = createCustomErrorClass("FeeEstimationFailed");\r\nvar FirmwareNotRecognized = createCustomErrorClass("FirmwareNotRecognized");\r\nvar HardResetFail = createCustomErrorClass("HardResetFail");\r\nvar InvalidXRPTag = createCustomErrorClass("InvalidXRPTag");\r\nvar InvalidAddress = createCustomErrorClass("InvalidAddress");\r\nvar InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass("InvalidAddressBecauseDestinationIsAlsoSource");\r\nvar LatestMCUInstalledError = createCustomErrorClass("LatestMCUInstalledError");\r\nvar UnknownMCU = createCustomErrorClass("UnknownMCU");\r\nvar LedgerAPIError = createCustomErrorClass("LedgerAPIError");\r\nvar LedgerAPIErrorWithMessage = createCustomErrorClass("LedgerAPIErrorWithMessage");\r\nvar LedgerAPINotAvailable = createCustomErrorClass("LedgerAPINotAvailable");\r\nvar ManagerAppAlreadyInstalledError = createCustomErrorClass("ManagerAppAlreadyInstalled");\r\nvar ManagerAppRelyOnBTCError = createCustomErrorClass("ManagerAppRelyOnBTC");\r\nvar ManagerAppDepInstallRequired = createCustomErrorClass("ManagerAppDepInstallRequired");\r\nvar ManagerAppDepUninstallRequired = createCustomErrorClass("ManagerAppDepUninstallRequired");\r\nvar ManagerDeviceLockedError = createCustomErrorClass("ManagerDeviceLocked");\r\nvar ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass("ManagerFirmwareNotEnoughSpace");\r\nvar ManagerNotEnoughSpaceError = createCustomErrorClass("ManagerNotEnoughSpace");\r\nvar ManagerUninstallBTCDep = createCustomErrorClass("ManagerUninstallBTCDep");\r\nvar NetworkDown = createCustomErrorClass("NetworkDown");\r\nvar NoAddressesFound = createCustomErrorClass("NoAddressesFound");\r\nvar NotEnoughBalance = createCustomErrorClass("NotEnoughBalance");\r\nvar NotEnoughBalanceToDelegate = createCustomErrorClass("NotEnoughBalanceToDelegate");\r\nvar NotEnoughBalanceInParentAccount = createCustomErrorClass("NotEnoughBalanceInParentAccount");\r\nvar NotEnoughSpendableBalance = createCustomErrorClass("NotEnoughSpendableBalance");\r\nvar NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass("NotEnoughBalanceBecauseDestinationNotCreated");\r\nvar NoAccessToCamera = createCustomErrorClass("NoAccessToCamera");\r\nvar NotEnoughGas = createCustomErrorClass("NotEnoughGas");\r\nvar NotSupportedLegacyAddress = createCustomErrorClass("NotSupportedLegacyAddress");\r\nvar GasLessThanEstimate = createCustomErrorClass("GasLessThanEstimate");\r\nvar PasswordsDontMatchError = createCustomErrorClass("PasswordsDontMatch");\r\nvar PasswordIncorrectError = createCustomErrorClass("PasswordIncorrect");\r\nvar RecommendSubAccountsToEmpty = createCustomErrorClass("RecommendSubAccountsToEmpty");\r\nvar RecommendUndelegation = createCustomErrorClass("RecommendUndelegation");\r\nvar TimeoutTagged = createCustomErrorClass("TimeoutTagged");\r\nvar UnexpectedBootloader = createCustomErrorClass("UnexpectedBootloader");\r\nvar MCUNotGenuineToDashboard = createCustomErrorClass("MCUNotGenuineToDashboard");\r\nvar RecipientRequired = createCustomErrorClass("RecipientRequired");\r\nvar UnavailableTezosOriginatedAccountReceive = createCustomErrorClass("UnavailableTezosOriginatedAccountReceive");\r\nvar UnavailableTezosOriginatedAccountSend = createCustomErrorClass("UnavailableTezosOriginatedAccountSend");\r\nvar UpdateFetchFileFail = createCustomErrorClass("UpdateFetchFileFail");\r\nvar UpdateIncorrectHash = createCustomErrorClass("UpdateIncorrectHash");\r\nvar UpdateIncorrectSig = createCustomErrorClass("UpdateIncorrectSig");\r\nvar UpdateYourApp = createCustomErrorClass("UpdateYourApp");\r\nvar UserRefusedDeviceNameChange = createCustomErrorClass("UserRefusedDeviceNameChange");\r\nvar UserRefusedAddress = createCustomErrorClass("UserRefusedAddress");\r\nvar UserRefusedFirmwareUpdate = createCustomErrorClass("UserRefusedFirmwareUpdate");\r\nvar UserRefusedAllowManager = createCustomErrorClass("UserRefusedAllowManager");\r\nvar UserRefusedOnDevice = createCustomErrorClass("UserRefusedOnDevice"); // TODO rename because it\'s just for transaction refusal\r\nvar TransportOpenUserCancelled = createCustomErrorClass("TransportOpenUserCancelled");\r\nvar TransportInterfaceNotAvailable = createCustomErrorClass("TransportInterfaceNotAvailable");\r\nvar TransportRaceCondition = createCustomErrorClass("TransportRaceCondition");\r\nvar TransportWebUSBGestureRequired = createCustomErrorClass("TransportWebUSBGestureRequired");\r\nvar DeviceShouldStayInApp = createCustomErrorClass("DeviceShouldStayInApp");\r\nvar WebsocketConnectionError = createCustomErrorClass("WebsocketConnectionError");\r\nvar WebsocketConnectionFailed = createCustomErrorClass("WebsocketConnectionFailed");\r\nvar WrongDeviceForAccount = createCustomErrorClass("WrongDeviceForAccount");\r\nvar WrongAppForCurrency = createCustomErrorClass("WrongAppForCurrency");\r\nvar ETHAddressNonEIP = createCustomErrorClass("ETHAddressNonEIP");\r\nvar CantScanQRCode = createCustomErrorClass("CantScanQRCode");\r\nvar FeeNotLoaded = createCustomErrorClass("FeeNotLoaded");\r\nvar FeeRequired = createCustomErrorClass("FeeRequired");\r\nvar FeeTooHigh = createCustomErrorClass("FeeTooHigh");\r\nvar SyncError = createCustomErrorClass("SyncError");\r\nvar PairingFailed = createCustomErrorClass("PairingFailed");\r\nvar GenuineCheckFailed = createCustomErrorClass("GenuineCheckFailed");\r\nvar LedgerAPI4xx = createCustomErrorClass("LedgerAPI4xx");\r\nvar LedgerAPI5xx = createCustomErrorClass("LedgerAPI5xx");\r\nvar FirmwareOrAppUpdateRequired = createCustomErrorClass("FirmwareOrAppUpdateRequired");\r\n// db stuff, no need to translate\r\nvar NoDBPathGiven = createCustomErrorClass("NoDBPathGiven");\r\nvar DBWrongPassword = createCustomErrorClass("DBWrongPassword");\r\nvar DBNotReset = createCustomErrorClass("DBNotReset");\r\n/**\r\n * TransportError is used for any generic transport errors.\r\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\r\n */\r\nfunction TransportError(message, id) {\r\n    this.name = "TransportError";\r\n    this.message = message;\r\n    this.stack = new Error().stack;\r\n    this.id = id;\r\n}\r\nTransportError.prototype = new Error();\r\naddCustomErrorDeserializer("TransportError", function (e) { return new TransportError(e.message, e.id); });\r\nvar StatusCodes = {\r\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\r\n    INCORRECT_LENGTH: 0x6700,\r\n    MISSING_CRITICAL_PARAMETER: 0x6800,\r\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\r\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\r\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\r\n    INCORRECT_DATA: 0x6a80,\r\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\r\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\r\n    FILE_ALREADY_EXISTS: 0x6a89,\r\n    INCORRECT_P1_P2: 0x6b00,\r\n    INS_NOT_SUPPORTED: 0x6d00,\r\n    CLA_NOT_SUPPORTED: 0x6e00,\r\n    TECHNICAL_PROBLEM: 0x6f00,\r\n    OK: 0x9000,\r\n    MEMORY_PROBLEM: 0x9240,\r\n    NO_EF_SELECTED: 0x9400,\r\n    INVALID_OFFSET: 0x9402,\r\n    FILE_NOT_FOUND: 0x9404,\r\n    INCONSISTENT_FILE: 0x9408,\r\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\r\n    INVALID_KCV: 0x9485,\r\n    CODE_NOT_INITIALIZED: 0x9802,\r\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\r\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\r\n    CONTRADICTION_INVALIDATION: 0x9810,\r\n    CODE_BLOCKED: 0x9840,\r\n    MAX_VALUE_REACHED: 0x9850,\r\n    GP_AUTH_FAILED: 0x6300,\r\n    LICENSING: 0x6f42,\r\n    HALTED: 0x6faa,\r\n};\r\nfunction getAltStatusMessage(code) {\r\n    switch (code) {\r\n        // improve text of most common errors\r\n        case 0x6700:\r\n            return "Incorrect length";\r\n        case 0x6800:\r\n            return "Missing critical parameter";\r\n        case 0x6982:\r\n            return "Security not satisfied (dongle locked or have invalid access rights)";\r\n        case 0x6985:\r\n            return "Condition of use not satisfied (denied by the user?)";\r\n        case 0x6a80:\r\n            return "Invalid data received";\r\n        case 0x6b00:\r\n            return "Invalid parameter received";\r\n    }\r\n    if (0x6f00 <= code && code <= 0x6fff) {\r\n        return "Internal error, please report";\r\n    }\r\n}\r\n/**\r\n * Error thrown when a device returned a non success status.\r\n * the error.statusCode is one of the `StatusCodes` exported by this library.\r\n */\r\nfunction TransportStatusError(statusCode) {\r\n    this.name = "TransportStatusError";\r\n    var statusText = Object.keys(StatusCodes).find(function (k) { return StatusCodes[k] === statusCode; }) ||\r\n        "UNKNOWN_ERROR";\r\n    var smsg = getAltStatusMessage(statusCode) || statusText;\r\n    var statusCodeStr = statusCode.toString(16);\r\n    this.message = "Ledger device: " + smsg + " (0x" + statusCodeStr + ")";\r\n    this.stack = new Error().stack;\r\n    this.statusCode = statusCode;\r\n    this.statusText = statusText;\r\n}\r\nTransportStatusError.prototype = new Error();\r\naddCustomErrorDeserializer("TransportStatusError", function (e) { return new TransportStatusError(e.statusCode); });\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///a8fc\n')}}]);